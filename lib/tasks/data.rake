namespace :data do

  task :export_profimedia_phrases_for_translation => :environment do
    path = "#{File.dirname(__FILE__)}/../../data/keyword-clean-phrase-export.csv"

    src_encoding = "Windows-1252"
    target_encoding = "utf-8"

    vocabulary = {}

    i = 0
    File.open(path).each do |line|
      print "\r#{i}"
      line = UnicodeUtils.downcase(line, :cs)

      if ImportLine.valid? line
        phrases = ImportLine.get_phrases(line)
        phrases.each {|p| vocabulary[p] = true}
      end

      i += 1
    end
    print "\r"

    file = File.open("#{File.dirname(__FILE__)}/../../data/phrases_list.txt", "w")

    i = 0
    vocabulary.each do |k, v|
      line = "#{k}\n"
      print "\rwriting #{i}"
      file.write(line)
      i += 1
    end

    print "\r"
  end

  task :translate_phrases => :environment do
    translation_path = "#{File.dirname(__FILE__)}/../../data/phrase_table_en_cs.txt"

    phrases_path = "#{File.dirname(__FILE__)}/../../data/phrases_list.txt"

    dictionary = Hash.new(nil)

    File.open(phrases_path).each do |line|
      line.chomp!
      dictionary[line] = ["", 0.to_f]
    end



    i = 0
    File.open(translation_path).each do |line|
      print "\r#{i}"
      i += 1

      parts = line.split(" ||| ")
      if dictionary.has_key?(parts[0])

        val = dictionary[parts[0]]
        score = parts[2].split(" ")[0].to_f

        if val[1] <= score
          val[0] = parts[1]
          val[1] = score
          dictionary[parts[0]] = val
        end
      end
    end

    file_out = File.open("#{File.dirname(__FILE__)}/../../data/phrases_list_translated_cs.txt", "w")

    dictionary.each do |k, v|
      if (v[1] > 0)
        line = "#{k}\t#{v[0]}\n"
        file_out.write(line)
      end
    end

  end

  task :export_profimedia_words_for_translation => :environment do
    path = "#{File.dirname(__FILE__)}/../../data/profi-text-cleaned.csv"

    src_encoding = "Windows-1252"
    target_encoding = "utf-8"

    vocabulary = {}

    i = 0
    File.open(path).each do |line|
      print "\r#{i}"
      line = line.encode(target_encoding, src_encoding)

      if ImportLine.valid? line
        ImportLine.new(line).import_words_plain(vocabulary)
      end

      i += 1
    end
    print "\r"

    file = File.open("#{File.dirname(__FILE__)}/../../data/word_list.txt", "w")

    i = 0
    vocabulary.each do |k, v|
      line = "#{k}\n"
      print "\rwriting #{i}"
      file.write(line)
      i += 1
    end

    print "\r"
  end

  task :create_tf_df_list => :environment do

    source_tool = LanguageTool.new(PRIMARY_LANGUAGE)

    SUPPORTED_LANGUAGES.each do |language|
      path = "#{File.dirname(__FILE__)}/../../data/profi-text-cleaned.csv"

      target_tool = LanguageTool.new(language)

      src_encoding = "Windows-1252"
      target_encoding = "utf-8"

      vocabulary = {}

      i = 0
      File.open(path).each do |line|
        print "\r#{language}: #{i}"
        line = line.encode(target_encoding, src_encoding)

        if ImportLine.valid? line
          used_words_in_line = {}
          parsed = ImportLine.new(line)
          plaintext = parsed.get_plaintext
          plaintext = source_tool.lowercase_line plaintext
          plaintext = source_tool.translate_line(plaintext, language)
          source_tool.tokenize(plaintext).each do |word|
            stem = target_tool.stem_word word
            if vocabulary.has_key?(stem)
              entry = vocabulary[stem]
              entry[:tf] += 1
              entry[:df] += 1 unless used_words_in_line.has_key?(stem)
            else
              entry = {
                tf: 1,
                df: 1
              }
              vocabulary[stem] = entry
            end
            used_words_in_line[stem] = 1
          end
          #ImportLine.new(line).import_words(vocabulary)
        end

        i += 1
      end
      print "\r"

      file = File.open("#{File.dirname(__FILE__)}/../../data/tf_df_list_#{language}.txt", "w")

      i = 0
      vocabulary.each do |k, v|
        line = "#{k}\t#{v[:tf]}\t#{v[:df]}\n"
        print "\rwriting #{i}"
        file.write(line)
        i += 1
      end

      print "\r"
    end

  end

  task :pair_profimedia_and_wiki_data do
    SUPPORTED_LANGUAGES.each do |language|
      wiki_data_path = "#{File.dirname(__FILE__)}/../../data/wiki_freq_list_#{language}.txt"
      profimedia_data_path = "#{File.dirname(__FILE__)}/../../data/tf_df_list_#{language}.txt"

      words = Hash.new(0)

      File.open(wiki_data_path).each do |line|
        c = line.split("\t")
        if c.size == 2
          words[c[0]] = c[1].to_i
        end
      end

      #output format
      #stem tf_profimedia df_profimedia tf_wiki
      file = File.open("#{File.dirname(__FILE__)}/../../data/paired_wiki_and_profimedia_#{language}.txt", "w")

      File.open(profimedia_data_path).each do |line|
        line = line.chomp
        if line.length > 0
          c = line.split("\t")

          #puts words[c[0]]
          line += "\t#{words[c[0]]}\n"

          file.write(line) if c[0].size > 0
        end
      end
    end
  end

  task :create_word_dictionary => :environment do

    #33265 words untranslated
    #google poznal named entities
    #musel jsem pouzit memsource
    #preklad na webu googlu prelozil jen 10 procent slov
    #google translator tools ma omezeni na 1 MB
    #musel jsem zrušit kapitalizeci, google napriklad vracel psČ;odstÁvČata, chovnÍ bĚhouni
    #odstranění interpunkce
    #obcas byla pomichana diakritika z jineho kodovani "boles?aw boles? aw", polske 'l'




    SUPPORTED_LANGUAGES.each do |language|

      next if language == PRIMARY_LANGUAGE

      tool = LanguageTool.new(language)

      path_source = "#{File.dirname(__FILE__)}/../../data/word_list.txt"
      path_target = "#{File.dirname(__FILE__)}/../../data/word_list_translated_#{language}.txt"

      dictionary_path = "#{File.dirname(__FILE__)}/../../data/word_dictionary_#{PRIMARY_LANGUAGE}_#{language}.txt"
      write_file = File.open(dictionary_path, "w")

      lines_source = File.readlines(path_source)
      lines_target = File.readlines(path_target)

      puts lines_source.size
      puts lines_target.size

      0.upto(lines_target.size - 1) do |i|
        source_word = lines_source[i].chomp
        target_word = lines_target[i].chomp

        target_word = source_word if target_word.size == 0

        target_word = tool.lowercase_line(target_word)

        target_word.gsub!(/[[:punct:]]/, "")
        target_word.strip!

        line = "#{source_word}\t#{target_word}\n"

        write_file.write(line)
      end
    end

  end

  task :test => :environment do


    SUPPORTED_LANGUAGES.each do |language|
      correct = 0
      file_count = Dir["#{File.dirname(__FILE__)}/../../train_data/#{language}/*"].size / 2
      puts "STARTING #{language}, #{file_count} files"
      1.upto(file_count) do |n|
        name = (1000 + n).to_s[1,3]
        text = File.read("#{File.dirname(__FILE__)}/../../train_data/#{language}/#{name}.txt")
        test_keywords = File.read("#{File.dirname(__FILE__)}/../../train_data/#{language}/#{name}.keywords").split("\n")
        puts " #{name}---"

        tool = LanguageTool.new(language)
        api = Api.new "", [], language
        keywords = api.keywords text

        keywords = keywords[0, 5]


        keywords.map! {|w| w[0]}
        test_keywords.map! {|w| tool.stem_word(w)}

        puts "   found: #{(keywords & test_keywords).join(" ")}"
        puts "  nfound: #{(test_keywords - keywords).join(" ")}"
        puts "  wfound: #{(keywords - test_keywords).join(" ")}"
        
        correct += 5 - (test_keywords - keywords).size
      end

      puts " CORRECT (#{language}): #{correct} / #{5 * file_count}\n\n"
    end
  end

  task :random_text_data => :environment do
    limit = 120

    path = "#{File.dirname(__FILE__)}/../../data/idn"
    files = Dir["#{path}/*"]
    files = files.shuffle
    files = files[0, limit]
    files.map! {|f| f[-12,5]}
    puts files.inspect
  end

  task :generate_random_ids => :environment do
    lines = File.readlines("#{File.dirname(__FILE__)}/../../data/image_ids.txt")
    lines.map! {|l| l.chomp!}
    size = lines.size

    result = []
    500.times do
      result.push(lines[rand(size)])
    end
    puts result.inspect
  end

  task :export_ids => :environment do
    path = "#{File.dirname(__FILE__)}/../../data/profi-text-cleaned.csv"
    export_path = "#{File.dirname(__FILE__)}/../../data/profi-text-cleaned.csv"
    out = File.open("#{File.dirname(__FILE__)}/../../data/image_ids.txt", "w")

    i = 0
    File.open(path).each do |line|
      print "\r#{i}"
      i += 1
      out.write("#{line[1,10]}\n")
    end
  end

  task :report => :environment do

    user_names = ["o_paroubkova", "o_havel", "o_rakosova", "o_odchazel_ondrej", "o_semerad", "o_pavlovic", "o_odchazel_vojtech"]
    user_names.sort!

    test_names = ["o_test1", "o_test2"]


    rename = {}
    rename["o_paroubkova"] =      "paroubkova"
    rename["o_havel"] =      "havel     "
    rename["o_rakosova"] =      "rakosova  "
    rename["o_odchazel_ondrej"] = "odchazel_o"
    rename["o_semerad"] =      "semerad   "
    rename["o_pavlovic"] =      "pavlovic  "
    rename["o_odchazel_vojtech"] =      "odchazel_v"

    user_stats = {}
    user_names.each {|n| user_stats[n] = {
      ok_o_test1: [],
      ok_o_test2: [],
      fail_o_test1: [],
      fail_o_test2: []
    }}

    results_hash = {}
    File.readlines("#{File.dirname(__FILE__)}/../../data/annotation_output.txt").each do |l|
      l.chomp!
      l.strip!
      result = l.split("/").last
      id = l.split("\t").first
      results_hash[id] = result
    end

    all_count = {}
    right_count = {}

    all_sum = 0
    right_sum = 0

    test_names.each do |test_name|
      all_count[test_name] = 0
      right_count[test_name] = 0
      File.readlines("#{File.dirname(__FILE__)}/../../data/#{test_name}_inputs_fixed.csv").each do |l|
        l.chomp!
        fields = l.split(" ")
        id = fields[0]
        user = fields[3]
        text = fields[4].split("-").last.split(".").first
        images = fields[5].split(";").map{|e| e.split("/").last}
        actual_answer = results_hash[id]

        if test_name == "o_test1"
          random1 = ["0007210728", "0001030712", "0041312880", "0077542194", "0034225897", "0008882893", "0049331239", "0004657841", "0034607988", "0007116667", "0049069897", "0004124310", "0034636007", "0012010063", "0005671936", "0009050414", "0013182570", "0013524080", "0050401132", "0003369549", "0013226103", "0004492880", "0048275307", "0012759043", "0005607702", "0004148425", "0070814828", "0013639720", "0006874931", "0004051776", "0054317658", "0007862751", "0051027003", "0007008568", "0049959256", "0034638408", "0051888928", "0002761475", "0001037071", "0037681449", "0034819424", "0014373576", "0014427382", "0053691113", "0007833088", "0003324475", "0055478413", "0069819686", "0001295674", "0055938828", "0004543724", "0009402234", "0050536437", "0013717136", "0034717479", "0013290311", "0002383477", "0008761051", "0006398919", "0005371062", "0002029419", "0006280846", "0049917699", "0011676175", "0012817885", "0013712337", "0004194075", "0070444145", "0049602848", "0051021582", "0005046286", "0013813821", "0008370559", "0007572140", "0070674998", "0002151723", "0012547160", "0001263354", "0014322390", "0043729399", "0005585127", "0008491311", "0049029786", "0033923632", "0077369620", "0034590042", "0034378350", "0005352734", "0051066739", "0005513537", "0010890842", "0048332485", "0013674547", "0034383289", "0001211520", "0005997426", "0013982195", "0009247483", "0011354122", "0003168067", "0048316409", "0077531417"]
          right_answer = images & random1
          right_answer = right_answer.first
        else
          random2 = ["0009036017", "0049813768", "0014188693", "0007113147", "0007526584", "0051006382", "0070852072", "0055606716", "0012250596", "0054331473", "0012827048", "0005591732", "0012987396", "0034713917", "0011646000", "0034167548", "0043428156", "0014041174", "0011176169", "0004059351", "0003000006", "0005194013", "0003600677", "0012439012", "0010067413", "0013859820", "0012018144", "0001296962", "0004514892", "0033826788", "0008500910", "0005603561", "0050974554", "0034566307", "0043397590", "0003552399", "0069893810", "0012622407", "0011256091", "0071270281", "0041361201", "0050023861", "0005949665", "0000720072", "0002328400", "0011632635", "0011836384", "0051866058", "0051970696", "0013147102", "0070655301", "0010605148", "0037451761", "0043347274", "0000923899", "0040359396", "0034114935", "0008253923", "0011250064", "0001808718", "0006797761", "0013026322", "0009704138", "0013015451", "0005634084", "0000951550", "0012945199", "0009923393", "0011134245", "0036595766", "0004168945", "0011675296", "0006433515", "0011900999", "0002060112", "0035702908", "0051834558", "0056060961", "0013149703", "0012320998", "0050767374", "0009861569", "0009402943", "0070685670", "0008517227", "0005268802", "0011713378", "0034128916", "0010601608", "0016830929", "0034447668", "0007744331", "0052112276", "0013892784", "0008780918", "0012575431", "0009590045", "0053431201", "0050543415", "0009928454", "0039722773", "0008648461", "0008163501", "0007579387", "0001946211", "0040178438", "0012048080", "0004821180", "0056564182", "0012276614", "0007107277", "0049638326", "0041276491", "0004802018", "0051861876", "0011665267", "0014882189", "0007130002", "0039848909", "0010800793", "0010024900", "0006459996", "0011154392", "0000991619", "0008676150", "0056116761", "0056538431", "0048951697", "0007391966", "0001915688", "0012946033", "0004602859", "0002939583", "0003187826", "0033902251", "0003619390", "0001217245", "0070255842", "0010438136", "0014895611", "0012905307", "0031792295", "0012441555", "0008319706", "0003204211", "0004266964", "0012313368", "0012712043", "0013806290", "0039379933", "0054967451", "0007713597", "0050992099", "0049442630", "0051064778", "0029409055", "0016817910", "0071942141", "0034353447", "0006022454", "0005835853", "0010090139", "0040250872", "0012185823", "0009112826", "0030589147", "0013439937", "0041345060", "0011082136", "0011533495", "0053381627", "0007964797", "0012017135", "0010347818", "0014675611", "0000980070", "0034210768", "0006420605", "0002231118", "0008891944", "0049529796", "0006781730", "0009203965", "0034044336", "0009057431", "0013453242", "0005277116", "0034714286", "0006066822", "0050127469", "0005625906", "0049290841", "0001020663", "0050751029", "0010874535", "0053358338", "0004320381", "0004647542", "0012945544", "0008273615", "0001709135", "0049173654", "0008623881", "0040254850", "0051978372", "0012296071", "0010238035", "0002381326", "0004313616", "0077466598", "0002515605", "0007812579", "0002556878", "0013119193", "0050449329", "0055610453", "0034853927", "0008848722", "0054215206", "0007187844", "0005969832", "0070120206", "0005866110", "0012869672", "0070359946", "0010369007", "0012495676", "0055995474", "0041122239", "0012774336", "0014484285", "0010946409", "0009695529", "0033644257", "0010635076", "0049912288", "0002797938", "0003366197", "0035154873", "0047936293", "0012825532", "0043457994", "0012985045", "0006722808", "0070739585", "0007975086", "0040482635", "0011676699", "0070128593", "0008103709", "0034853797", "0002160769", "0043267085", "0038496308", "0011765669", "0009392829", "0006988680", "0049648823", "0070199089", "0012261313", "0008842926", "0048845162", "0001355485", "0006528511", "0051886783", "0013921252", "0076955170", "0034307540", "0005151880", "0014285839", "0003042457", "0050978756", "0006636425", "0009410135", "0002907413", "0054104034", "0012614487", "0048228919", "0011797604", "0077150110", "0008054972", "0070110493", "0005193513", "0042395068", "0050381937", "0048143763", "0002301346", "0070658845", "0054395635", "0007783879", "0010253790", "0002662170", "0007704232", "0010418538", "0051965566", "0007864294", "0056224351", "0054129191", "0009137653", "0009473642", "0002117262", "0004843248", "0000813237", "0029453387", "0004980014", "0010165198", "0011995251", "0004552268", "0042134790", "0070663865", "0013318458", "0010202536", "0008054700", "0009166804", "0051025999", "0055002553", "0009379001", "0002984276", "0003769692", "0034759345", "0054167924", "0014236151", "0004058401", "0050184281", "0013349764", "0003406124", "0001628498", "0001728313", "0013062620", "0004494838", "0009168414", "0013966891", "0005658712", "0008338403", "0002465854", "0009244454", "0005098654", "0048211335", "0010354385", "0048189628", "0049299810", "0050123418", "0003164058", "0013506287", "0048282383", "0003735724", "0013110869", "0005066231", "0007082739", "0036044422", "0000978649", "0007029987", "0071252929", "0006111519", "0048934626", "0048898702", "0000788390", "0007094962", "0050724075", "0009264956", "0040000493", "0050585532", "0077150950", "0006284570", "0076871635", "0010151599", "0042281826", "0033559845", "0049042015", "0005808348", "0007841253", "0055964721", "0043146555", "0001027577", "0007056766", "0012687089", "0070367015", "0008498657", "0012470728", "0003889538", "0004286719", "0001721870", "0013002446", "0008225596", "0002884783", "0011117301", "0051817057", "0051025002", "0013966980", "0004515499", "0014178763", "0012775790", "0010455397", "0006455973", "0011190683", "0005644818", "0049847158", "0012211670", "0002292043", "0006702900", "0000986200", "0077123645", "0054327150", "0009538361", "0008534622", "0034483064", "0007763873", "0077111962", "0051070840", "0000846718", "0009084373", "0049555194", "0007096648", "0005969644", "0006704399", "0011400058", "0049086885", "0029462445", "0010739922", "0012016683", "0006615258", "0054981861", "0077229481", "0003863410", "0049844262", "0001719742", "0029354274", "0048320680", "0005301023", "0013698377", "0003651651", "0004178014", "0013209740", "0077213357", "0053451759", "0006517822", "0010627373", "0005836294", "0043461799", "0033717955", "0054133098", "0007510530", "0006536302", "0013615087", "0004191880", "0005796800", "0002256982", "0005117963", "0012341604", "0008530629", "0009372546", "0050461864", "0050492937", "0004663983", "0003448237", "0011634367", "0070918684", "0041061849", "0003127530", "0012843059", "0013119629", "0009536551", "0035799844", "0048877868", "0008489712", "0034735455", "0035804692", "0047974711", "0050110348", "0011238491", "0008915218", "0003442614", "0007455458", "0012168543", "0014004447", "0006524314", "0070385039", "0004889443", "0008919045", "0048948748", "0005162221", "0070838990", "0012224517", "0011295366", "0051887515", "0004483779", "0006512469", "0048854901", "0011320266", "0049749627", "0001088467", "0041185470", "0048897337", "0008787783", "0002630324", "0001984388", "0002951447"]
          right_answer = images - random2
          right_answer = right_answer.first
        end

        # puts l
        # puts id
        # puts user
        # puts text
        # puts images.inspect
        # puts right_answer
        # puts actual_answer

        all_count[test_name] += 1
        if right_answer == actual_answer
          right_count[test_name] += 1
          user_stats[user]["ok_#{test_name}".to_sym].push("#{text}-#{test_name}")
        else
          user_stats[user]["fail_#{test_name}".to_sym].push("#{text}-#{test_name}")
        end
      end
      puts "Výsledek testu #{test_name}: #{stat right_count[test_name], all_count[test_name]}"
      right_sum += right_count[test_name]
      all_sum += all_count[test_name]
    end

    puts "Celkové výsledky dohromady: #{stat right_sum, all_sum}"
    puts "\n\n"

    user_stats.each do |k,v|
      puts rename[k]
      ok = 0
      all = 0
      ok_tests = []
      fail_tests = []
      test_names.each do |test_name|
        ok_tests += v["ok_#{test_name}".to_sym]
        fail_tests += v["fail_#{test_name}".to_sym]
        stat_ok = v["ok_#{test_name}".to_sym].size
        stat_fail = v["fail_#{test_name}".to_sym].size
        ok += stat_ok
        all += stat_ok + stat_fail
        sum = stat_ok + stat_fail
        puts " #{test_name}: #{stat stat_ok, sum}" if sum > 0
      end
      puts " celkem:  #{stat ok, all}"
      user_names.each do |user_name|
        next if k == user_name
        p_ok_tests = []
        p_fail_tests = []
        added_username = false
        test_names.each do |test_name|
          ok1 = user_stats[k]["ok_#{test_name}".to_sym]
          fail1 = user_stats[k]["fail_#{test_name}".to_sym]
          ok2 = user_stats[user_name]["ok_#{test_name}".to_sym]
          fail2 = user_stats[user_name]["fail_#{test_name}".to_sym]

          ok_ok = (ok1 & ok2).size
          ok_fail = (ok1 & fail2).size
          fail_ok = (fail1 & ok2).size
          fail_fail = (fail1 & fail2).size

          total_sum = ok_ok + ok_fail + fail_ok + fail_fail

          if total_sum > 0
            unless added_username
              added_username = true
              puts "  #{rename[user_name]}"
            end

            kappa = kappa_calc(ok_ok, ok_fail, fail_ok, fail_fail)

            puts "   #{test_name}"
            puts "    #{ok_ok}\t#{ok_fail}"
            puts "    #{fail_ok}\t#{fail_fail}"
            puts "    Cohen's kappa = #{kappa}"
          end
          p_ok_tests += user_stats[user_name]["ok_#{test_name}".to_sym]
          p_fail_tests += user_stats[user_name]["fail_#{test_name}".to_sym]
        end
        ok_sum = (fail_tests & p_fail_tests).size + (ok_tests & p_ok_tests).size
        all_sum = ((fail_tests + ok_tests) & (p_fail_tests + p_ok_tests)).size
        #puts "  #{rename[user_name]}: #{stat ok_sum, all_sum}" if all_sum > 0
      end
      puts ""
    end

    puts ""

    test_names.each do |test_name|
      puts "#{test_name}"
      puts " nesprávné označení (text, uživatel)"
      ids = []
      user_names.each do |user_name|
        user_stats[user_name]["fail_#{test_name}".to_sym].each do |id|
          id = id.split("-").first
          id += " #{user_name}"
          ids.push(id)
        end
      end
      ids.sort!
      ids.each do |id|
        puts "  #{id}"
      end

      pure_ids = ids.map{|i| i.split(" ").first}

      wrong = pure_ids.size
      wrong_both = wrong - pure_ids.uniq.size


      annotation_sum = all_count[test_name]
      text_sum = annotation_sum / 2
      puts "celkem #{annotation_sum} anotací #{text_sum} textů"
      puts "každý text oanotován dvěma anotátory"
      puts " oba správně : #{stat (text_sum - wrong_both - (wrong - wrong_both)), text_sum}"
      puts " oba špatně  : #{stat wrong_both, text_sum}"
      puts " jeden špatně: #{stat (wrong - wrong_both), text_sum}"
      puts ""

    end

  end

  def kappa_calc a, b, c, d
    a = a.to_f
    b = b.to_f
    c = c.to_f
    d = d.to_f

    sum = a + b + c + d

    probayes = (a + b) / sum
    probbyes = (a + c) / sum

    probano = (c + d) / sum
    probbno = (b + d) / sum

    probyes = probayes * probbyes
    probno  = probano * probbno

    prob = probyes + probno

    kappa = (((a + d) / sum) - prob) / (1.0 - prob)
    return kappa

  end

  def stat ok, all
    return "" if all == 0
    return "#{ok} / #{all} = #{((ok.to_f * 100.to_f / all.to_f).to_s + "   ")[0, 5]} %"
  end

  #test1 data
  #random_ids = ["0007210728", "0001030712", "0041312880", "0077542194", "0034225897", "0008882893", "0049331239", "0004657841", "0034607988", "0007116667", "0049069897", "0004124310", "0034636007", "0012010063", "0005671936", "0009050414", "0013182570", "0013524080", "0050401132", "0003369549", "0013226103", "0004492880", "0048275307", "0012759043", "0005607702", "0004148425", "0070814828", "0013639720", "0006874931", "0004051776", "0054317658", "0007862751", "0051027003", "0007008568", "0049959256", "0034638408", "0051888928", "0002761475", "0001037071", "0037681449", "0034819424", "0014373576", "0014427382", "0053691113", "0007833088", "0003324475", "0055478413", "0069819686", "0001295674", "0055938828", "0004543724", "0009402234", "0050536437", "0013717136", "0034717479", "0013290311", "0002383477", "0008761051", "0006398919", "0005371062", "0002029419", "0006280846", "0049917699", "0011676175", "0012817885", "0013712337", "0004194075", "0070444145", "0049602848", "0051021582", "0005046286", "0013813821", "0008370559", "0007572140", "0070674998", "0002151723", "0012547160", "0001263354", "0014322390", "0043729399", "0005585127", "0008491311", "0049029786", "0033923632", "0077369620", "0034590042", "0034378350", "0005352734", "0051066739", "0005513537", "0010890842", "0048332485", "0013674547", "0034383289", "0001211520", "0005997426", "0013982195", "0009247483", "0011354122", "0003168067", "0048316409", "0077531417"]
  #ids = ["06752", "01758", "08781", "04947", "08752", "10076", "03907", "07822", "07084", "07792", "08036", "00207", "00070", "13448", "12051", "15157", "14610", "05449", "01089", "15232", "02412", "02211", "02059", "09018", "14008", "01921", "07732", "04566", "05640", "03615", "01337", "07757", "14737", "03202", "03430", "09399", "01595", "13294", "15513", "04025", "12442", "09817", "04107", "09093", "09237", "04151", "15282", "12471", "04900", "00881", "03758", "06945", "09551", "07604", "14972", "02343", "14539", "12605", "03901", "01853"]

  #test2 data
  #random_ids = ["0009036017", "0049813768", "0014188693", "0007113147", "0007526584", "0051006382", "0070852072", "0055606716", "0012250596", "0054331473", "0012827048", "0005591732", "0012987396", "0034713917", "0011646000", "0034167548", "0043428156", "0014041174", "0011176169", "0004059351", "0003000006", "0005194013", "0003600677", "0012439012", "0010067413", "0013859820", "0012018144", "0001296962", "0004514892", "0033826788", "0008500910", "0005603561", "0050974554", "0034566307", "0043397590", "0003552399", "0069893810", "0012622407", "0011256091", "0071270281", "0041361201", "0050023861", "0005949665", "0000720072", "0002328400", "0011632635", "0011836384", "0051866058", "0051970696", "0013147102", "0070655301", "0010605148", "0037451761", "0043347274", "0000923899", "0040359396", "0034114935", "0008253923", "0011250064", "0001808718", "0006797761", "0013026322", "0009704138", "0013015451", "0005634084", "0000951550", "0012945199", "0009923393", "0011134245", "0036595766", "0004168945", "0011675296", "0006433515", "0011900999", "0002060112", "0035702908", "0051834558", "0056060961", "0013149703", "0012320998", "0050767374", "0009861569", "0009402943", "0070685670", "0008517227", "0005268802", "0011713378", "0034128916", "0010601608", "0016830929", "0034447668", "0007744331", "0052112276", "0013892784", "0008780918", "0012575431", "0009590045", "0053431201", "0050543415", "0009928454", "0039722773", "0008648461", "0008163501", "0007579387", "0001946211", "0040178438", "0012048080", "0004821180", "0056564182", "0012276614", "0007107277", "0049638326", "0041276491", "0004802018", "0051861876", "0011665267", "0014882189", "0007130002", "0039848909", "0010800793", "0010024900", "0006459996", "0011154392", "0000991619", "0008676150", "0056116761", "0056538431", "0048951697", "0007391966", "0001915688", "0012946033", "0004602859", "0002939583", "0003187826", "0033902251", "0003619390", "0001217245", "0070255842", "0010438136", "0014895611", "0012905307", "0031792295", "0012441555", "0008319706", "0003204211", "0004266964", "0012313368", "0012712043", "0013806290", "0039379933", "0054967451", "0007713597", "0050992099", "0049442630", "0051064778", "0029409055", "0016817910", "0071942141", "0034353447", "0006022454", "0005835853", "0010090139", "0040250872", "0012185823", "0009112826", "0030589147", "0013439937", "0041345060", "0011082136", "0011533495", "0053381627", "0007964797", "0012017135", "0010347818", "0014675611", "0000980070", "0034210768", "0006420605", "0002231118", "0008891944", "0049529796", "0006781730", "0009203965", "0034044336", "0009057431", "0013453242", "0005277116", "0034714286", "0006066822", "0050127469", "0005625906", "0049290841", "0001020663", "0050751029", "0010874535", "0053358338", "0004320381", "0004647542", "0012945544", "0008273615", "0001709135", "0049173654", "0008623881", "0040254850", "0051978372", "0012296071", "0010238035", "0002381326", "0004313616", "0077466598", "0002515605", "0007812579", "0002556878", "0013119193", "0050449329", "0055610453", "0034853927", "0008848722", "0054215206", "0007187844", "0005969832", "0070120206", "0005866110", "0012869672", "0070359946", "0010369007", "0012495676", "0055995474", "0041122239", "0012774336", "0014484285", "0010946409", "0009695529", "0033644257", "0010635076", "0049912288", "0002797938", "0003366197", "0035154873", "0047936293", "0012825532", "0043457994", "0012985045", "0006722808", "0070739585", "0007975086", "0040482635", "0011676699", "0070128593", "0008103709", "0034853797", "0002160769", "0043267085", "0038496308", "0011765669", "0009392829", "0006988680", "0049648823", "0070199089", "0012261313", "0008842926", "0048845162", "0001355485", "0006528511", "0051886783", "0013921252", "0076955170", "0034307540", "0005151880", "0014285839", "0003042457", "0050978756", "0006636425", "0009410135", "0002907413", "0054104034", "0012614487", "0048228919", "0011797604", "0077150110", "0008054972", "0070110493", "0005193513", "0042395068", "0050381937", "0048143763", "0002301346", "0070658845", "0054395635", "0007783879", "0010253790", "0002662170", "0007704232", "0010418538", "0051965566", "0007864294", "0056224351", "0054129191", "0009137653", "0009473642", "0002117262", "0004843248", "0000813237", "0029453387", "0004980014", "0010165198", "0011995251", "0004552268", "0042134790", "0070663865", "0013318458", "0010202536", "0008054700", "0009166804", "0051025999", "0055002553", "0009379001", "0002984276", "0003769692", "0034759345", "0054167924", "0014236151", "0004058401", "0050184281", "0013349764", "0003406124", "0001628498", "0001728313", "0013062620", "0004494838", "0009168414", "0013966891", "0005658712", "0008338403", "0002465854", "0009244454", "0005098654", "0048211335", "0010354385", "0048189628", "0049299810", "0050123418", "0003164058", "0013506287", "0048282383", "0003735724", "0013110869", "0005066231", "0007082739", "0036044422", "0000978649", "0007029987", "0071252929", "0006111519", "0048934626", "0048898702", "0000788390", "0007094962", "0050724075", "0009264956", "0040000493", "0050585532", "0077150950", "0006284570", "0076871635", "0010151599", "0042281826", "0033559845", "0049042015", "0005808348", "0007841253", "0055964721", "0043146555", "0001027577", "0007056766", "0012687089", "0070367015", "0008498657", "0012470728", "0003889538", "0004286719", "0001721870", "0013002446", "0008225596", "0002884783", "0011117301", "0051817057", "0051025002", "0013966980", "0004515499", "0014178763", "0012775790", "0010455397", "0006455973", "0011190683", "0005644818", "0049847158", "0012211670", "0002292043", "0006702900", "0000986200", "0077123645", "0054327150", "0009538361", "0008534622", "0034483064", "0007763873", "0077111962", "0051070840", "0000846718", "0009084373", "0049555194", "0007096648", "0005969644", "0006704399", "0011400058", "0049086885", "0029462445", "0010739922", "0012016683", "0006615258", "0054981861", "0077229481", "0003863410", "0049844262", "0001719742", "0029354274", "0048320680", "0005301023", "0013698377", "0003651651", "0004178014", "0013209740", "0077213357", "0053451759", "0006517822", "0010627373", "0005836294", "0043461799", "0033717955", "0054133098", "0007510530", "0006536302", "0013615087", "0004191880", "0005796800", "0002256982", "0005117963", "0012341604", "0008530629", "0009372546", "0050461864", "0050492937", "0004663983", "0003448237", "0011634367", "0070918684", "0041061849", "0003127530", "0012843059", "0013119629", "0009536551", "0035799844", "0048877868", "0008489712", "0034735455", "0035804692", "0047974711", "0050110348", "0011238491", "0008915218", "0003442614", "0007455458", "0012168543", "0014004447", "0006524314", "0070385039", "0004889443", "0008919045", "0048948748", "0005162221", "0070838990", "0012224517", "0011295366", "0051887515", "0004483779", "0006512469", "0048854901", "0011320266", "0049749627", "0001088467", "0041185470", "0048897337", "0008787783", "0002630324", "0001984388", "0002951447"]
  #ids = ["06379", "04530", "08940", "08621", "13803", "15726", "09394", "09277", "12036", "04747", "00696", "05800", "15404", "11569", "15560", "15204", "02324", "00029", "10076", "11847", "11671", "01299", "00000", "09853", "14381", "04964", "15598", "00405", "15540", "03270", "15770", "05714", "10132", "14353", "00248", "14257", "04211", "09901", "02972", "07684", "08239", "05754", "07796", "00124", "00022", "06806", "04282", "01365", "03480", "01882", "07834", "09743", "06777", "02112", "15861", "15910", "04328", "08317", "02823", "12993", "02505", "03568", "00957", "01907", "05469", "04610", "12189", "06787", "01232", "05102", "07130", "14329", "02738", "00623", "01911", "09399", "01113", "00744", "02843", "03245", "12931", "02263", "06980", "07792", "03322", "02483", "15840", "12875", "07587", "01404", "13646", "15266", "01054", "00591", "06587", "02189", "03904", "01660", "09509", "04480", "14988", "00580", "02322", "05692", "08015", "13674", "03610", "01313", "08533", "01570", "11537", "07901", "08307", "07326", "05067", "04876", "04833", "12148", "02814", "04368"]

  task :test_data => :environment do

    users = ["o_paroubkova", "o_havel", "o_rakosova", "o_odchazel", "o_semerad"]

    user_pairs = []

    users.each do |u1|
      users.each do |u2|
        if u1 != u2
          6.times {user_pairs.push([u1, u2])}
        end
      end
    end

    user_pairs.each do |pair|
      #puts pair[0]
      #puts pair[1]
      #puts "#{pair[0]} #{pair[1]}"
    end

    #puts user_pairs.size

    output = ""

    html = ""

    random_ids = ["0009036017", "0049813768", "0014188693", "0007113147", "0007526584", "0051006382", "0070852072", "0055606716", "0012250596", "0054331473", "0012827048", "0005591732", "0012987396", "0034713917", "0011646000", "0034167548", "0043428156", "0014041174", "0011176169", "0004059351", "0003000006", "0005194013", "0003600677", "0012439012", "0010067413", "0013859820", "0012018144", "0001296962", "0004514892", "0033826788", "0008500910", "0005603561", "0050974554", "0034566307", "0043397590", "0003552399", "0069893810", "0012622407", "0011256091", "0071270281", "0041361201", "0050023861", "0005949665", "0000720072", "0002328400", "0011632635", "0011836384", "0051866058", "0051970696", "0013147102", "0070655301", "0010605148", "0037451761", "0043347274", "0000923899", "0040359396", "0034114935", "0008253923", "0011250064", "0001808718", "0006797761", "0013026322", "0009704138", "0013015451", "0005634084", "0000951550", "0012945199", "0009923393", "0011134245", "0036595766", "0004168945", "0011675296", "0006433515", "0011900999", "0002060112", "0035702908", "0051834558", "0056060961", "0013149703", "0012320998", "0050767374", "0009861569", "0009402943", "0070685670", "0008517227", "0005268802", "0011713378", "0034128916", "0010601608", "0016830929", "0034447668", "0007744331", "0052112276", "0013892784", "0008780918", "0012575431", "0009590045", "0053431201", "0050543415", "0009928454", "0039722773", "0008648461", "0008163501", "0007579387", "0001946211", "0040178438", "0012048080", "0004821180", "0056564182", "0012276614", "0007107277", "0049638326", "0041276491", "0004802018", "0051861876", "0011665267", "0014882189", "0007130002", "0039848909", "0010800793", "0010024900", "0006459996", "0011154392", "0000991619", "0008676150", "0056116761", "0056538431", "0048951697", "0007391966", "0001915688", "0012946033", "0004602859", "0002939583", "0003187826", "0033902251", "0003619390", "0001217245", "0070255842", "0010438136", "0014895611", "0012905307", "0031792295", "0012441555", "0008319706", "0003204211", "0004266964", "0012313368", "0012712043", "0013806290", "0039379933", "0054967451", "0007713597", "0050992099", "0049442630", "0051064778", "0029409055", "0016817910", "0071942141", "0034353447", "0006022454", "0005835853", "0010090139", "0040250872", "0012185823", "0009112826", "0030589147", "0013439937", "0041345060", "0011082136", "0011533495", "0053381627", "0007964797", "0012017135", "0010347818", "0014675611", "0000980070", "0034210768", "0006420605", "0002231118", "0008891944", "0049529796", "0006781730", "0009203965", "0034044336", "0009057431", "0013453242", "0005277116", "0034714286", "0006066822", "0050127469", "0005625906", "0049290841", "0001020663", "0050751029", "0010874535", "0053358338", "0004320381", "0004647542", "0012945544", "0008273615", "0001709135", "0049173654", "0008623881", "0040254850", "0051978372", "0012296071", "0010238035", "0002381326", "0004313616", "0077466598", "0002515605", "0007812579", "0002556878", "0013119193", "0050449329", "0055610453", "0034853927", "0008848722", "0054215206", "0007187844", "0005969832", "0070120206", "0005866110", "0012869672", "0070359946", "0010369007", "0012495676", "0055995474", "0041122239", "0012774336", "0014484285", "0010946409", "0009695529", "0033644257", "0010635076", "0049912288", "0002797938", "0003366197", "0035154873", "0047936293", "0012825532", "0043457994", "0012985045", "0006722808", "0070739585", "0007975086", "0040482635", "0011676699", "0070128593", "0008103709", "0034853797", "0002160769", "0043267085", "0038496308", "0011765669", "0009392829", "0006988680", "0049648823", "0070199089", "0012261313", "0008842926", "0048845162", "0001355485", "0006528511", "0051886783", "0013921252", "0076955170", "0034307540", "0005151880", "0014285839", "0003042457", "0050978756", "0006636425", "0009410135", "0002907413", "0054104034", "0012614487", "0048228919", "0011797604", "0077150110", "0008054972", "0070110493", "0005193513", "0042395068", "0050381937", "0048143763", "0002301346", "0070658845", "0054395635", "0007783879", "0010253790", "0002662170", "0007704232", "0010418538", "0051965566", "0007864294", "0056224351", "0054129191", "0009137653", "0009473642", "0002117262", "0004843248", "0000813237", "0029453387", "0004980014", "0010165198", "0011995251", "0004552268", "0042134790", "0070663865", "0013318458", "0010202536", "0008054700", "0009166804", "0051025999", "0055002553", "0009379001", "0002984276", "0003769692", "0034759345", "0054167924", "0014236151", "0004058401", "0050184281", "0013349764", "0003406124", "0001628498", "0001728313", "0013062620", "0004494838", "0009168414", "0013966891", "0005658712", "0008338403", "0002465854", "0009244454", "0005098654", "0048211335", "0010354385", "0048189628", "0049299810", "0050123418", "0003164058", "0013506287", "0048282383", "0003735724", "0013110869", "0005066231", "0007082739", "0036044422", "0000978649", "0007029987", "0071252929", "0006111519", "0048934626", "0048898702", "0000788390", "0007094962", "0050724075", "0009264956", "0040000493", "0050585532", "0077150950", "0006284570", "0076871635", "0010151599", "0042281826", "0033559845", "0049042015", "0005808348", "0007841253", "0055964721", "0043146555", "0001027577", "0007056766", "0012687089", "0070367015", "0008498657", "0012470728", "0003889538", "0004286719", "0001721870", "0013002446", "0008225596", "0002884783", "0011117301", "0051817057", "0051025002", "0013966980", "0004515499", "0014178763", "0012775790", "0010455397", "0006455973", "0011190683", "0005644818", "0049847158", "0012211670", "0002292043", "0006702900", "0000986200", "0077123645", "0054327150", "0009538361", "0008534622", "0034483064", "0007763873", "0077111962", "0051070840", "0000846718", "0009084373", "0049555194", "0007096648", "0005969644", "0006704399", "0011400058", "0049086885", "0029462445", "0010739922", "0012016683", "0006615258", "0054981861", "0077229481", "0003863410", "0049844262", "0001719742", "0029354274", "0048320680", "0005301023", "0013698377", "0003651651", "0004178014", "0013209740", "0077213357", "0053451759", "0006517822", "0010627373", "0005836294", "0043461799", "0033717955", "0054133098", "0007510530", "0006536302", "0013615087", "0004191880", "0005796800", "0002256982", "0005117963", "0012341604", "0008530629", "0009372546", "0050461864", "0050492937", "0004663983", "0003448237", "0011634367", "0070918684", "0041061849", "0003127530", "0012843059", "0013119629", "0009536551", "0035799844", "0048877868", "0008489712", "0034735455", "0035804692", "0047974711", "0050110348", "0011238491", "0008915218", "0003442614", "0007455458", "0012168543", "0014004447", "0006524314", "0070385039", "0004889443", "0008919045", "0048948748", "0005162221", "0070838990", "0012224517", "0011295366", "0051887515", "0004483779", "0006512469", "0048854901", "0011320266", "0049749627", "0001088467", "0041185470", "0048897337", "0008787783", "0002630324", "0001984388", "0002951447"]

    i = 0
    base_path = "#{File.dirname(__FILE__)}/../../data/idn"
    ids = ["06379", "04530", "08940", "08621", "13803", "15726", "09394", "09277", "12036", "04747", "00696", "05800", "15404", "11569", "15560", "15204", "02324", "00029", "10076", "11847", "11671", "01299", "00000", "09853", "14381", "04964", "15598", "00405", "15540", "03270", "15770", "05714", "10132", "14353", "00248", "14257", "04211", "09901", "02972", "07684", "08239", "05754", "07796", "00124", "00022", "06806", "04282", "01365", "03480", "01882", "07834", "09743", "06777", "02112", "15861", "15910", "04328", "08317", "02823", "12993", "02505", "03568", "00957", "01907", "05469", "04610", "12189", "06787", "01232", "05102", "07130", "14329", "02738", "00623", "01911", "09399", "01113", "00744", "02843", "03245", "12931", "02263", "06980", "07792", "03322", "02483", "15840", "12875", "07587", "01404", "13646", "15266", "01054", "00591", "06587", "02189", "03904", "01660", "09509", "04480", "14988", "00580", "02322", "05692", "08015", "13674", "03610", "01313", "08533", "01570", "11537", "07901", "08307", "07326", "05067", "04876", "04833", "12148", "02814", "04368"]
    ids.each do |id|
      path = "#{base_path}/idn-#{id}.txt.gz"

      pair = user_pairs.shift

      #puts "ID: #{id}"
      Zlib::GzipReader.open(path) do |gz|
        text = gz.readlines.join("\n")
        api = Api.new text, [], "cs"
        html += "<h1>#{id}</h1>"
        html += text
        html += "<br>"
        results_ids = []

        4.times do
          results_ids.push(random_ids.shift)
        end

        results = api.search(0, 1)
        results["hits"]["hits"].each do |hit|
          results_ids.push hit["_id"]
        end

        results_ids = results_ids.shuffle

        img_paths = results_ids.map {|p| "mufin_images/#{p}"}

        pair.each do |user|
          #mufin_images
          line = "#{310000 + i} o_test2 0 #{user} ./text/idn/idn-#{id}.txt.gz #{img_paths.join(';')}"
          puts line
          i += 1
        end

        results_ids.each do |ri|
          html += "<img src=\"http://mufin.fi.muni.cz/profimedia/bigImages/#{ri}\" height=200>"
        end
      end
    end

    file = File.open("#{File.dirname(__FILE__)}/../../public/test.html", "w")
    file.write(html)

  end

end

